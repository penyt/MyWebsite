[{"content":"正文 🐧\n企鵝有一對翅膀\n企鵝不會飛\n企鵝會吃魚\n企鵝世界最可愛\n引用 有沒有一種可能，企鵝其實會飛 \u0026mdash;penli\n在這邊試一些酷功能\n送出 小企🐧偷偷隱藏了一隻魚魚🐟，要拿給小狐🦊吃\nfish ","date":"2024-03-08T00:00:00Z","image":"http://localhost:1313/p/big-sky-ground/cover_hu5671925019618629746.jpg","permalink":"http://localhost:1313/p/big-sky-ground/","title":"小企的大天地"},{"content":"前言 如果你有多台主機，並且架設了 docker 服務，其實可以不用再每一台主機上都部署 traefik 來處理每個容器的反向代理和 TLS 證書\n當然，如果在同一個區域網路下，可以簡單地使用 traefik 的動態配置文件做到\n可是如果今天不在同一區域網路下呢？常見的情況就是在不同區域網路下的多台 VPS\n又或者，就是想要使用 docker 的 traefik label 來設定中間件（middleware）呢？\n畢竟如果想要添加 authentik、authelia 這類的授權頁面，或者使用 crowdsec，利用 traefik 的中間件非常方便設置\n其實還有一個方法，那就是在 docker swarm 下部署容器，並利用 overlay network 來做到跨越多台 docker 主機的作用，也就是這篇文章的內容\n🐧 docker swarm 的好處 I. 需求少 如果你的機器沒有公共 IP（public IP），像是宿舍或公寓裡自架的伺服器，你未必會有最上游 NAT 的權限來設置端口轉發（port fowarding），那麼在這台主機上所設置的服務，便會無法暴露到外網\n而若使用 docker swarm，便只需要在一台機器上部署 traefik 進行反向代理，就可以把你家裡伺服器上的服務或網站暴露到外網\n好處就是：只需要有一個公共 IP、只需要部署一個 traefik\n且 docker swarm 是 docker 內建的功能，在完整安裝 docker engine 的時候就存在了，也不會佔用很多資源\nII. 容易設置 使用 docker swarm 只需要簡單修改一下 docker 的 \u0026ldquo;labels\u0026rdquo; 區塊，和部署應用程式時的 docker 命令，就可以完成了\n🐧 操作方法 前提 host1 : 「擁有」公共 IP，並且 traefik 將部署在這裡\nhost2 : 「沒有」公共 IP，其他的 app 會部署在這裡\n第一步，初始化 docker swarm 在 host1 執行:\ndocker swarm init 他會輸出像這樣的內容，但這是設置 worker 用的token：\ndocker swarm join --token THISIS-7-89456123789aworker456987token....... IP_ADDR:2377\n另外還會有一行，這行才是我們需要使用的：\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n所以接著，繼續在 host1 執行:\ndocker swarm join-token manager 他會輸出像這樣的內容，這是設置 manager 用的token：\ndocker swarm join --token MAGENA-7-89456123789r456987token....... IP_ADDR:2377\n第二步，將 host2 設置成 manager （非 worker，因為 worker 無法自行部署 app ） 切換到 host2 後，執行 MANAGER 的設置命令\n（記得複製你自己的）docker swarm join --token MAGENA-7-8943789r487token....... IP_ADDR:2377 接著，執行這個命令來檢查節點的狀態\ndocker node ls 應該會輸出像這樣的內容:\nID \u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp; HOSTNAME \u0026emsp;\u0026emsp; STATUS \u0026emsp;\u0026emsp; AVAILABILITY \u0026emsp;\u0026emsp;\u0026emsp; MANAGER STATUS \u0026emsp;\u0026emsp;\u0026emsp; ENGINE VERSION idofhostt2 host2 Ready Active Reachable 27.3.1\nidofhostt1 * host1 Ready Active Leader 27.3.1\n現在，我們就成功透過 docker swarm 來連接兩台跨網路的裝置了！\n第三步，新增 traefik 的 docker-compose.yml 和其他配置文件 1 在 host1 新增如下方的資料夾和檔案\n新增資料夾 : mkdir traefik 進入資料夾 : cd traefik 新增檔案 : touch traefik.yml config.yml acme.json docker-compose.yml 設置 acme 的權限 : chmod 600 acme.json traefik\n├ docker-compose.yml\n├ traefik.yml\n├ config.yml\n└ acme.json\n編輯 docker-compose.yml nano docker-compose.yml，把連結裡的內容貼上;\n編輯 traefik.yml nano traefik.yml，把連結裡的內容貼上\n(此步驟非必要，但強烈建議) 加上哈希密碼\nsudo apt-get install apache2-utils 將「username」和「yourpassword」設置成你自己的用戶名和密碼\nhtpasswd -nb username yourpassword 命令執行後，會出現像這樣的一串：username:$apr1$8VzK7EwL$4Z9T.HqxGkJpAqVnqp4Ol1。\n把所有的 $ 改成 $$ (以避免 docker compose 會把單個$譯為環境變數)\n接著，把 docker-compose.yml 裡面的 user:hashed_password 改成剛剛出現的那一串\n第四步，部署 traefik 在 host1 執行：\ndocker stack deploy -c docker-compose.yml traefik 或使用任何你喜歡的名稱 docker stack deploy -c docker-compose.yml traefik_stack_name\n在 host1 和 host2 檢查\ndocker service ls 輸出如下 :\nID \u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp; NAME \u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp; MODE \u0026emsp;\u0026emsp; REPLICAS \u0026emsp;\u0026emsp; IMAGE \u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp; PORTS rtafeiksid traefik_traefik replicated 1/1 traefik:latest\n第五步，新增 whoami 的 docker-compose.yml 切換到 host2 新增如下方的資料夾和檔案\n新增資料夾 : mkdir whoami 進入資料夾 : cd whoami 新增檔案 : touch docker-compose.yml whoami\n└ docker-compose.yml\n編輯 docker-compose.yml nano docker-compose.yml，把連結裡的內容貼上\n第六步，部署 apps (whoami) 在 host2 執行：\ndocker stack deploy -c docker-compose.yml whoami 或使用任何你喜歡的名稱 docker stack deploy -c docker-compose.yml whoami_stack_name\n在 host1 和 host2 檢查\ndocker service ls 輸出如下 :\nID \u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp; NAME \u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp; MODE \u0026emsp;\u0026emsp; REPLICAS \u0026emsp;\u0026emsp; IMAGE \u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp;\u0026emsp; PORTS rtafeiksid traefik_traefik replicated 1/1 traefik:latest\nwhoidami whoami2_whoami2 replicated 1/1 traefik/whoami:v1.10\n第七步，完成 現在，應該可以透過你在 traefik 標籤裡設置的域名來訪問 traefik 的 dashboard 或是 whoami 的頁面了\n若有出現任何錯誤，記得:\n確認你的 DNS 紀錄有將域名指向 host1 檢查 traefik 的日誌 docker service logs traefik_traefik 檢查 docker swarm 的 overlay network docker network inspect proxy by Pen traefik deployment reference: JimsGarage \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2025-01-16T14:33:23Z","permalink":"http://localhost:1313/p/docker-swarm-traefik/","title":"在 Docker Swarm 部署 traefik 以實現跨主機代理"},{"content":"前言 這是我所設計的一個簡易網頁應用，我叫他 pi-pen\n他是使用 node.js 作為後端，利用樹莓派內建的系統溫度文件或系統命令來獲取溫度\n接著透過 javascript 將數據實時每 5 秒更新並顯示在網頁上。\nDEMO ⋙ demo website\nhttps://pi-pen.penli.quest 使用方式 程式碼結構 pi-pen\n├ server.js └ public\n└ index.html server.js /public/index.html 實際操作 到你想要存放程式碼的位置，將我的 repo 複製下來 git clone https://github.com/penyt/pi-pen.git\n或是複製 server.js 和 /public/index.html 這兩個主要檔案也可以。\n接著在 pi-pen 資料夾下，執行\nnode server.js 若樹莓派沒有 node，先 看這個 安裝\n此時，在瀏覽器打上 http://localhost:5472 就可以看到如下的畫面，這就是樹莓派的溫度\n右邊有下拉選單可以視需求調整要觀察的時間\n關於資料儲存 這個程式主要只是在快速有圖形介面觀察溫度，而不需要監測硬體，主要目的在於方便快速\n所以我用來存放資料的 json 檔案（程式執行後會自動生成在 pi-pen 資料夾裡），只會儲存 24小時 的數據！！！\n超過 24 小時的會自動被刪除，不要把它當成永久儲存溫度數據的地方喔\n如何在背景運行？ 我這邊使用 PM2 ，來達成背景運作的功效\n若樹莓派上沒有 PM2 那麼就用 npm 來安裝（官方的方式）\nnpm install pm2 -g 接著進入 pi-pen 資料夾（cd /path/to/pi-pen），執行：\npm2 start server.js 如果有更改 server.js 的檔名，這裡要記得改掉\n查看 PM2 狀態：\npm2 status 查看日誌：\npm2 logs 這時就算關閉終端，這個網頁應用還是會繼續運行\n也可使用 vcgencmd 命令來獲取溫度 只需要將 server.js 替換成底下這個 server-vcgencmd.js 就可以了 server-vcgencmd.js by Pen\n","date":"2025-01-14T16:22:16Z","permalink":"http://localhost:1313/p/pi-pen/","title":"使用 Node.js 製作的樹莓派溫度監控網頁應用"},{"content":"🐧 背景：112化工學士\n🐧 前言 10/16放榜一周過去，發文回饋社會🦊。第一次考的時候是大四剛畢業112年，從去年六月中準備到考試（約2個月），中途出了車禍，騎機車被無良小黃撞：）\n選考物理化學是因為大學科系必修，但是最後個位分數我是沒想到的…… 其他科目分數倒是還算在預料之中。今年第二次考，大約從五月開始準備（約3.5個月），沒有膽子選物理化學了，選了感覺比較能在短時間拉起來的工業設計，如願上榜。\n🐧 準備心情 第一次像是去期中期末考，中間還去了輕井澤真好玩（被嗆很久），第二次是考學測的認真程度\n🐧 準備時間 第一次 2 個月，第二次 3.5 個月，兩次考試中間在事務所打雜\n🐧 成績 科目 112年第一次考試 113年第二次考試 (上榜) 專利法規 47(申21/測26) 71(申37/測34) 行政救濟 55(申29/測26) 58(申36/測22) 普物普化 78 72 審查基準 60(申38/測22) 65(申35/測30) 專業英文 55(申19/測36) 61(申13/測48) 物理化學 9 X 工業設計 X 61 代理實務 40 65 平均 49.1428 64.7142 🐧 準備用書、評價 專利法規：法條（專利法、TRIPs、巴黎公約）、學校法律系專利法上課講義、高點智財法爭點解讀（伊律師）\n法條要中英一起 高點智財法爭點解讀架構清晰、例子充足，推推👍🏻 行政救濟：法條（行政程序法、訴願法、行政訴訟法、智慧財產審理法）、高點函授（韓台大）、輔助用書（程樂、行政法十講x2）\n智財審理法：很重要，一定要看 高點函授：整體觀念架構不錯，推👍🏻 程樂：挑需要的來填充筆記（視需求） 十講：也是補充筆記，但我用的不多，函授和十講感覺可以擇一 普物普化：大學筆記、Halliday普物、Zumdahl普化\n兩本原文書都很讚（大一讀的） Halliday我備考有買中文譯本，專門整理公式用的，推👍🏻 審查基準：官方審查基準（葵花寶典，不用別的書）\n專業英文：法條（專利法、TRIPs、巴黎公約）、智財局單字\n(1) 物理化學：大學筆記、原文書（我9分）\n(2) 工業設計：網路上各種資源、工業設計論、設計概論、ptt patentable筆記\n不一定要買書，網路上很多資源 ptt patentable筆記很不錯，提供準備方向👍🏻 代理實務：一些打雜時期寫的稿、專利師歷屆試題詳解（郭熙）\n專利師歷屆試題詳解，推推👍🏻 🐧 準備方式和考試心得 專利法規：\n準備方式：我大四修完學校的專利法，有一定的概念，這個部分應該看函授或看書可以代替（高點函授、伊律師那本），一定要先有整體架構，然後去寫考古題，寫完考古題一定要訂正，還要整理自己的答題模板，模板要滾瓜爛熟！模板很重要，模板只要寫好記熟，塗改少而且寫得快，一個爭點的模板整理幾個小時很正常。有時間可以去看司律智財的擬答。 心得：選擇題一翻兩瞪眼，專利法、TRIPs、巴黎公約一定要熟，施行細則會考重要的；手寫用三段論法，法條能背就背，條號錦上添花。 行政救濟：\n準備方式：我沒有修過課，所以是看函授先理解大架構，然後看書和例子去補充筆記，再挑函授重要的部分重看一遍。我覺得是最難的一科，很痛苦（第一次選擇題分數高是因為運氣好，出很多熟的）。一樣需要做模板。 心得：選擇題法條要熟，觀念要熟；手寫用三段論法，法條能背就背，條號錦上添花。 普物普化：第一次考的時候，把所有大一的東西都重念了一次，然後才開始刷題，第二次就直接刷題+整理公式。公式要記，選擇題給的時間（一小時）根本沒辦法讓你慢慢推！！我一直都是考試推推派，所以這科我也很痛苦，變背科…，可是想說明明就會寫，不想送他，就盡力硬著頭皮背了。\n審查基準：不管手寫選擇，不用多說啃爛審查基準就對了，裡面的案例一定一定要看，手寫很多跟案例一樣的，也需要整理模板（設計也要）。這個手寫的格式好像比較沒有要求。\n專業英文：選擇題不難，專利法英文版、TRIPs、巴黎公約要記熟，寫考古題的時候每個選項好好訂正、整理單字；手寫看起來要法學名詞很精確才會高分（我做不到..），第二題通常是翻譯，要盡量多拿一點。這科是我花最少時間的，除了法條對照英文版和訂正考古題之外沒有再花時間。申論第一題我都用白話文寫，採放推策略\n(1) 物理化學（抱怨）：想考9分再問我。我的物化上下 A 和 A- 彷彿是假的：) 我以為我畢業證書是雞腿換的\n(2) 工業設計：多看、多找，看書看影片都可以，設計史的部分要自己整理一下。不要怕背、不要怕瞎掰（？ 我113年第二題寫「巴黎奧運的床是紙做的」和一些廢話，結果還拿了10分…\n代理實務：多看多寫專利說明書，每個欄位都有機會出，一定要多寫，不要怕重寫！\n🐧 答題時間分配 選擇+手寫，選擇題約15-25分鐘就要解決，選擇題寫完進入手寫後就不要回來看（不要改不要改不要改答案） 普物普化各半小時，不拿手的科目偷另一科的5-10分鐘，但拿手的準確度不能丟 代理實務三小時，時間要分配好，時間越長越容易失算（要寫說明書欄位的題目手會很痠，要有心理準備） 🐧 結論 整體來說，每一科的大架構理解完，就可以寫考古題了，寫考古題一定要計時，寫完一定要訂正，申論不要怕重寫，選擇題每個選項都要懂。整理模板很重要，不要懶！普物普化想要寫完不可能不背東西，推推派認命努力背QQ。\n基本上每一科我覺得考古題就夠了，從大概107、108開始往後寫，寫到剩一回留著，再開始從107、108往前寫，考試前三週開始要按照時辰331去計時，習慣考試作息。考前一週把剩的那一回（114要考就是留113的），一樣照著時辰寫完，就可以開開心心去考試了（?\n🐧🦊\n","date":"2024-10-23T16:19:48Z","permalink":"http://localhost:1313/p/113%E5%B9%B4%E5%B0%88%E5%88%A9%E5%B8%AB%E8%80%83%E8%A9%A6%E4%B8%8A%E6%A6%9C%E5%BF%83%E5%BE%97/","title":"113年專利師考試上榜心得"},{"content":"最近用 word 的追蹤修訂在改文件，但是要給別人的時候，別人卻說不會用追蹤修訂，也不想學\u0026hellip;\n我是不想一個一個標註顏色、底線、刪除線啦 🙃🙃🙃\n所以寫了這個 VBA 一次解決\n情況 情況分成兩種：\n第一種：只把插入的標註紅色+底線\n第二種：插入的部分變紅色文字+底線，刪除的變成藍色文字+刪除線\n邏輯 邏輯上來說很簡單：\n1.偵測修改的部分\n2.插入的部分直接先加上顏色和底線\n3.接受所有插入部分\n4.刪除的部分複製一份放在原本的詞句後面（因為刪除的實際上來說已經是不存在的了，只是因為追蹤修訂暫時保留）\n5.在複製的那一份加上顏色和刪除線\n6.接受所有刪除部分\n最後一步稍微思考一下其實就不會弄錯\n在 word 操作 第一步：打開 word，按 Alt + F11\n第二步：工具列 「插入」+「模組」 （insert + module）\n第三步：底下這些程式碼挑適合的貼上\n（如果要儲存，右鍵這個專案，「匯出檔案」）\n第四步：關閉 VBA 視窗\n第五步：在 word，按 Alt + F8\n第六步：選擇 InsertRed 或 InsertRedDeleteBlue 或任何自己取的名字，點「執行」\n第七步：等他（追蹤修訂的數量決定需要的時間），完成\n基本上是不會有錯誤啦，但是也可以人工再檢查一下\n插入是紅色，刪除是藍色 只有插入是紅色 by Pen\n","date":"2024-10-04T13:37:54Z","permalink":"http://localhost:1313/p/word-track-revision/","title":"Word 追蹤修訂一次改為實際文字顏色"},{"content":"介紹 Wildcard DNS 甚麼是 Wildcard DNS??\n要讓 whatever.hi.my.domain 、 whenever.hi.my.domain 、 whoever.hi.my.domain 全部指向 54.87.87.87 IP 位址\n不用設置三個 DNS 紀錄，設置一個就好了\n讓所有 .hi.my.domain 的子域名全部指向同一個 54.87.87.87 IP 位址，這就是 Wildcard Dns\nPiHole UI 設置出現錯誤 如果像是 bind 之類的 DNS，可能只要直接設置 A 紀錄：*.hi.my.domain =\u0026gt; 54.87.87.87，就可以了\n但是如果用 pihole 的 local DNS 的話，用 UI 介面是沒有辦法設置的，如果你像底下這樣輸入，就會顯示錯誤訊息\n但我們可以去修改 pihole 的配置文件就可以做到了\n更改 PiHole 配置文件 首先進入 dnsmasq.d 的資料夾，然後新建立一個 XX-wildcard.conf 的檔案\ncd /etc/dnsmasq.d/ sudo nano 05-wildcard.conf 在這個檔案輸入： /etc/dnsmasq.d/05-wildcard.conf 之後保存退出 (記得把域名和 IP 改成你要的)\n然後讓 pihole 重新抓你的配置檔\nservice pihole-FTL restart 這樣其實就完成了，要確認的話用 nslookup，他就會顯示你設定的 IP 了 (當然你 nslookup 的環境要使用 pihole 的 dns，不然怎麼 nslookup 都看不到喔)\nnslookup whatever.hi.my.domain nslookup whenever.hi.my.domain nslookup whoever.hi.my.domain by Pen\n","date":"2024-07-07T15:30:40Z","permalink":"http://localhost:1313/p/pi-wildcard-dns/","title":"Pihole 設置 Wildcard Dns"},{"content":"用戶體驗 stack主題的toc在手機端並不顯示，但我自己覺得目錄蠻重要的\n而且手機寬度縮短，長度就會變長，沒有目錄的話就要一直滑滑滑，體驗並不是很好\n可是電腦版目錄在右側的版面我也很喜歡，所以就打算改成 手機端目錄在文章開頭、電腦端則照舊在右側\n參考、引入 toc 的 html 之前 github issue 有人做過把目錄放進文章，根據這個改了一下，加上手機端的條件、更改樣式 (程式碼在後面)\n在想要目錄出現的位置引入 toc-inline 就可以了（我放在 content.html 的\u0026lt;section class=\u0026quot;article-content\u0026quot;\u0026gt;裡面第一行\n/layouts/partials/article/components/content.html 程式碼 /layouts/partials/article/components/toc-inline.html /assets/scss/custom.scss 效果 🔼 手機端效果1 🔼 手機端效果2 by Pen\n","date":"2024-03-23T16:15:07Z","permalink":"http://localhost:1313/p/stack-toc/","title":"Hugo Stack 主題 -- 目錄 toc 設置更改"},{"content":"問題 用docker架設hugo網站的人可能不多，不過寫下前陣子遇到的問題\n在config檔案明明設置了baseurl，但是實際的permalink卻一直是https://localhost:1313\n很多需要重新導向的服務都會出問題（前陣子遇到utterance在登入github的時候導不回來\n後來爬了很多文發現是hugo server的問題，可能被其他預設的配置蓋掉了config的設定\n解決 當在容器裡進行hugo server或hugo的時候，直接指定--baseurl\ndocker-compose.yaml 我是用docker compose安裝hugo，所以直接加在command的地方，然後不要port\n設置好新的yaml後，再到yaml的資料夾裡面docker compose up -d\npermalink就變成https://my.domain.com了\n可以去網頁直接F12確認\n這時候utterance或其他重新導向的服務就可以正常使用不會導去localhost了\n參考資料 https://github.com/JamesTurland/JimsGarage https://www.sujaypillai.dev/2020/08/2020-08-17-setting-up-blog-on-aws-using-traefik-docker/ by Pen\n","date":"2024-04-01T09:53:20Z","permalink":"http://localhost:1313/p/hugo-docker-baseurl/","title":"關於用 docker 安裝 hugo 的 baseurl 問題"},{"content":"用GCP建立一個自己的虛擬主機一點都不難\n接下來會介紹如何獲取第一次使用GCP的免費額度，並實際建立一個新的虛擬主機🎈\n建立虛擬主機 建立帳號 首先當然要有一個google帳號，然後用他登入 GCP 然後免費試用給他按下去就對了\n全部同意，繼續 步驟1/2，就跟平常辦一些帳號一樣，選一選然後繼續 步驟2/2，就如實填，然後要填一張信用卡當作付款方式(簽帳金融卡應該也可以)，他會試刷一美金\n但之後有300美金所以基本上還不會扣到款，等90天結束需要付款的時候google會再問你 建立專案 建立專案名稱，他有一些符號或大小寫有規定，就照著他的規定去設定\n設定好讓他跑一下，建立完成會出現這個畫面，會顯示專案的資訊\n然後按左上角的三條橫線叫出選單\n選擇compute engine -\u0026gt; VM執行個體\n會需要啟用comput engine API，點選啟用，這裡需要等一下子\n進到這個畫面前置作業就都完成了，可以開始新建自己的虛擬主機了\n建立主機 設定名稱(一樣會有一些符號的小限制)，區域選 奧勒岡州、愛荷華州、南卡羅來納州，然後機器類型選e2-micro\n為甚麼要選這些呢?因為這是GCP的免費限制!!可以參考官方的文件 當然，要選在亞洲也沒有不行，而且90天內我們有300美元(約台幣9,000元)，可以之後搬到新的主機就好\n不過不是特別大的流量的話，我是覺得地區選在美國速度也沒有很慢，這邊就自己選擇\n右邊橘色框框會根據你所選的虛擬主機配置實時更新，可以用那個大略估計你的預算，當然那只是預估而已! gcp計費是用多少付多少的機制\n然後往下，這邊會發現有自訂的選項，CPU和記憶體都可以根據自己的需要去設定，這邊我們直接使用配置好的e2-micro\n繼續往下，我們會看到開機磁碟的選項，就和一般電腦一樣你會需要一個磁碟\n這邊點選 變更，然後我選ubuntu和標準永久磁碟，這邊也是根據自己的需求調整(google很好心的還有附上磁碟類型的比較)，想要直接選SSD或極端也可以\n大小先選10GB，一樣是根據需求調整，如果要用來架設雲端的話，可以把空間設大一點\n不過隨著這些改變的當然就是價錢啦!就根據需要自行評估了💸\n選好開機磁碟後，右邊的價錢預估也會跟著變動\n再來往下到防火牆的部分，如果你是想要架設網站，要讓其他人訪問你的網站，要把http和https打勾，這樣gcp會在你確定建立VM的時候，一併幫你把端口(port)80和443打開\n確定之後按下建立\n等他跑一下，這邊建議他在跑的時候不要動視窗，不管是甚麼設置都一樣，耐心等一下比較不會出現未知的錯誤，也不會很久\n接著看到主機名稱的左邊出現綠色勾勾✅就是成功建立了\n這時候你自己的虛擬主機就建立好了!\n保留靜態外部IP 後面接著講一些小設定，主機設立好了還有一個很重要的東西是我們的IP位址\n目前設定下來我們的外部IP位址其實是動態的，意思就是在每次主機關機重啟的過程IP位址是會變動的\n那這個對於一些不論是增加安全性的IP白名單(VPN)或是其他網域的設定會比較麻煩\n這邊就示範一下如何保留靜態IP位址(當然如果喜歡動態的IP也可以維持不變，動態IP也有它的好處 eg.隱私性、費用問題等等\u0026hellip;)\n首先我們先點進來我們的VM，然後點選上方的「編輯」\n滑到下方會有一個「網路介面」把它點開\n可以看到 外部IPv4 的地方是「臨時」\n我們點選他\n然後選擇「保留靜態外部IP位址」\n輸入名稱，然後按 保留\n儲存對主機的變更，之後跳出來，看到的外部IP就已經是靜態的IP了，重新開機也不會變動\n如果不放心可以再點進去主機查看\n變更歷史 右上角的小鈴鐺可以看到你做的每一個變更動作\nSSH 連線 再來是用SSH連線進入虛擬主機\n這邊用最直接的方式，透過gcp的SSH按鈕進入，點 在瀏覽器視窗中開啟\n接著他會彈出一個視窗(如果瀏覽器有封鎖彈出式視窗要記得解除)，告訴你他正在連線\n如果有再彈出要允許他連線的話直接按 授權/同意/允許 就可以了(肯定是要授權才能使用他這個SSH連線方式\u0026hellip;)\n這個SSH按鈕他會生成一對金鑰掛到你的虛擬主機，整個過程會慢一點，後面會再介紹別的方式連線主機\n最後\u0026hellip;\n出現這個視窗就是成功用SSH連線了!!\n底下綠色的會是user@vm-name\n@前面被我馬賽克的是你的使用者名稱(通常會是這個google帳號)，@後面就是你的虛擬主機名稱\neg. gmail是iampenguin@gmail.com，用戶名會是iampenguin\n而虛擬主機是my-first-vm的話，就會顯示 iampenguin@my-first-vm\n今天的介紹就到這裡ㄌ\nby Pen\n","date":"2024-03-22T00:00:00Z","permalink":"http://localhost:1313/p/%E5%BB%BA%E7%BD%AE%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/","title":"建置虛擬主機"},{"content":"問題 docker ps 指令的輸出格式會很容易超出螢幕，不好閱讀 (這大家應該都知道不需要展示圖片了吧ㄎ)\n官方文件 docker有給出 --format 的 官方文件 自訂命令 這是我自己使用的調整格式後的docker ps命令\ncommand 輸出結果 輸出結果是這樣的：\n明顯好閱讀很多很多很多\nWindterm快捷（我個人沒有再使用了） 我個人從去年後半開始便沒有再使用 windterm 了，原因不外乎 windterm 一直以來未完全開源的問題，我現在就是完全使用 vscode 和終端機了\n這邊我使用windterm快捷命令可以直接這樣輸入到快捷命令的Text:框框，也供大家參考： windterm shortcut 如果空格在命令中無法使用，可以改成 \\t 用跳脫字元，但我用GCP網頁的SSH叫都沒問題空格應該是可以使用的 大概就這樣\nby Pen\n","date":"2024-03-19T08:52:50Z","permalink":"http://localhost:1313/p/docker-ps/","title":"docker ps 格式"},{"content":"📏 文字對齊 \u0026lt;center\u0026gt; 置中了吧 \u0026lt;/center\u0026gt; 置中了吧 \u0026lt;p align=\"left\"\u0026gt; 靠左了吧 \u0026lt;/p\u0026gt; 靠左了吧 \u0026lt;p align=\"right\"\u0026gt; 靠右了吧 \u0026lt;/p\u0026gt; 靠右了吧 🎨 文字顏色 \u0026lt;font color=#FF0000\u0026gt; 紅色的文字 \u0026lt;/font\u0026gt;\n紅色的文字 🌀 html 跳脫字元 字元 編碼 \u0026lt; \u0026amp;lt; \u0026gt; \u0026amp;gt; { \u0026amp;#123; } \u0026amp;#125; 大空格 \u0026amp;emsp; 小空格 \u0026amp;nbsp; html 字元 🔖 書籤連結 手機端會太擁擠，所以我讓圖片在手機端隱藏，img的地方加上class=\u0026quot;hide-on-mobile\u0026quot;，class=\u0026quot;hide-on-mobile\u0026quot; 寫在 style 裡面\nmd 引入格式：\u0026ensp; \u0026#123;\u0026#123;\u0026lt;link-card name=\"\" desc=\"\" link=\"\" img=\"\"\u0026gt;\u0026#125;\u0026#125; shortcode html 程式碼：\nhttps://gist.github.com/penyt/6e19f98476ffa5d737d8f8b268dcd0fa#file-link-card-html 樣式 scss 程式碼：\nhttps://gist.github.com/penyt/6e19f98476ffa5d737d8f8b268dcd0fa#file-link-card-var-scss 效果 (書籤連結) \u0026ldquo;shortcode html\u0026rdquo; 連結做成書籤：\nlink-card.html ⋙ shortcode html\nhttps://gist.github.com/penyt/6e19f98476ffa5d737d8f8b268dcd0fa#file-link-card-html \u0026ldquo;樣式 scss\u0026rdquo; 連結做成書籤：\nlink-card-var.scss ⋙ 樣式 scss\nhttps://gist.github.com/penyt/6e19f98476ffa5d737d8f8b268dcd0fa#file-link-card-var-scss 👩🏻‍💻 gist 嵌入加上標題 原始的 gist 嵌入的樣式不喜歡，還有最底下那條 \u0026ldquo;hosted with ❤️ by GitHub\u0026rdquo;，我是選擇用自己的樣式保留著，畢竟是 github 的服務，直接刪掉總感覺不太恰當\n再用一個方框加上標題，可以自訂和gist檔案名稱不同的標題，標題也可以連結到gist的頁面\npenyt 是我的 github 帳號，你要換成自己的\nmd 引入格式：\u0026ensp; \u0026#123;\u0026#123;\u0026lt;gist-title \"title\" penyt ID (檔名)\u0026gt;\u0026#125;\u0026#125; shortcode html 程式碼：\nhttps://gist.github.com/penyt/6e19f98476ffa5d737d8f8b268dcd0fa#file-gist-title-html 樣式 scss 程式碼：\nhttps://gist.github.com/penyt/6e19f98476ffa5d737d8f8b268dcd0fa#file-gist-scss 效果 (gist 標題) gist-title.html gist.scss 🔐文章加密 shortcode html：\n樣式 scss：\n效果 (文章加密) ","date":"2024-04-02T09:25:58Z","permalink":"http://localhost:1313/p/my-shortcode/","title":"Hugo Stack 主題 -- 我的 Shortcode"}]